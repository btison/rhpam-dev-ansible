---

- name: create {{ service_account }} service account
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ service_account }}"
    namespace: "{{ ocp_project }}"

- name: copy business-central template
  template:
    src: "{{ businesscentral_template }}"
    dest: "{{ work_dir }}/rhpam-dev-business-central.yaml"

- name: check if business-central is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ businesscentral_application_name }}"
    namespace: "{{ ocp_project }}"
    kind: dc
  register: result

- name: deploy business-central
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ ocp_project }}"
    files:
      - "{{ work_dir }}/rhpam-dev-business-central.yaml"
  when: result.results.stderr is defined and result.results.stderr != ""

# postgresql
- name: create work directory
  file:
    path: "{{ work_dir }}/{{ postgresql_init_configmap }}"
    state: directory

- name: copy init files to work directory
  copy:
    src: "{{ item }}"
    dest: "{{ work_dir }}/{{ postgresql_init_configmap }}/"
  with_fileglob:
    - "{{ resources_dir }}/postgresql/*.sh"
    - "{{ resources_dir }}/postgresql/sql/*.sql"

- name: create {{ postgresql_init_configmap }} configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ postgresql_init_configmap }}"
    namespace: "{{ ocp_project }}"
    from_file:
      dir: "{{ work_dir }}/{{ postgresql_init_configmap }}"

- name: copy postgresql template
  template:
    src: "{{ postgresql_template }}"
    dest: "{{ work_dir }}/postgresql-persistent.yaml"

- name: postgresql secret
  oc_secret:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ ocp_project }}"
    name: "{{ postgresql_credentials_secret }}"
    type: generic
    from_literal:
      database-user: "{{ postgresql_username }}"
      database-password: "{{ postgresql_password }}"
      database-name: "{{ postgresql_database }}"    
  
- name: check if postgresql is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ postgresql_application_name }}"
    namespace: "{{ ocp_project }}"
    kind: dc
  register: result

- name: deploy postgresql
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ ocp_project }}"
    files:
      - "{{ work_dir }}/postgresql-persistent.yaml"
  when: result.results.stderr is defined and result.results.stderr != ""

# kie server
- name: wait for postgresql to be ready
  shell: "{{ openshift_cli }} get dc {{ postgresql_application_name }} -o template --template={{ json_template }} -n {{ ocp_project }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false

- name: wait for business-central to be ready
  shell: "{{ openshift_cli }} get dc {{ businesscentral_application_name }} -o template --template={{ json_template }} -n {{ ocp_project }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false

- name: copy kie-server template
  template:
    src: "{{ kieserver_template }}"
    dest: "{{ work_dir }}/rhpam-dev-kieserver.yaml"

- name: check if kie-server is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ kieserver_application_name }}"
    namespace: "{{ ocp_project }}"
    kind: dc
  register: result

- name: deploy kie-server
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ ocp_project }}"
    files:
      - "{{ work_dir }}/rhpam-dev-kieserver.yaml"
  when: result.results.stderr is defined and result.results.stderr != ""
